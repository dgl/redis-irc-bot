#!/usr/bin/env bash
# Â©2023 David Leadbeater <https://dgl.cx/0bsd>; SPDX-License-Identifier: 0BSD
#
# A simple IRC bot using Redis pubsub. The idea is this can never change and
# all your logic is done via talking to it via Redis pubsub.
#
# Writing to "your-channel" sends messages to the channel.
#
# Writing to "your-channel:raw" (without a #) sends raw messages, this is used
# for internal uses too. If Redis goes down, it won't be able to reply to PINGs
# on IRC and so will disconnect.

redis="${1:-127.0.0.1}"
server="${2:-irc.example.com}"
nick="${3:-rbot}"
[[ $# -lt 4 ]] && : "${4:?Usage: $0 redis-server irc-server nick channel [channel...]}"

DEBUG=${DEBUG:-}

set -u

declare -a channels
for i in $(eval "echo {4..$#}"); do
  channel="${!i}"
  if [[ ${channel:0:1} = '#' ]]; then
    channel="${channel:1}"
  fi
  channels[$[i-4]]="$channel"
done

RAW_TOPIC="${channels[0]}:raw"
PRIV_TOPIC="${channels[0]}:priv"

debug() {
  [[ -z $DEBUG ]] && return
  echo "$*" | cat -v >&2
}

redis-cli() {
  if [[ -z $DEBUG ]]; then
    command redis-cli -h $redis "$@" >/dev/null
  else
    (set -x; command redis-cli -h $redis "$@")
  fi
}

redis() {
  redis-cli "$@"
  if [[ $? != 0 ]]; then
    # Retry once
    sleep 2
    redis-cli "$@"
    if [[ $? != 0 ]]; then
      # Redis probably gone away, bot goes away too (note because we use
      # redis to join a channel, this won't come back until redis is back,
      # generally the desired behaviour).
      exit 2
    fi
  fi
}

raw() {
  redis publish "$RAW_TOPIC" "$*"
}

find-stdbuf() {
  # OpenBSD, etc.
  gstdbuf --version &>/dev/null && stdbuf=gstdbuf
  # GNU/Something
  stdbuf --version &>/dev/null && stdbuf=stdbuf

  if [[ -z $stdbuf ]]; then
    echo "You need to install stdbuf from coreutils"
    exit 1
  fi
}

input() {
  echo "USER $nick * * :https://dgl.cx/redis-irc-bot"
  echo "NICK $nick"
  $stdbuf -oL redis-cli -h $redis subscribe $RAW_TOPIC "${channels[@]}" | while read -r type; do
    read -r topic # 2nd line
    read -r message # 3rd line

    debug "$type $topic $message"

    if [[ $type != message ]]; then
      continue
    fi

    if [[ $topic = $RAW_TOPIC ]]; then
      echo "$message"
      if [[ "${message:0:4}" = QUIT ]]; then
        break
      fi
    else
      echo "PRIVMSG #$topic :$message"
    fi
  done
}

output() {
  while read -r line; do
    line="${line//}"
    debug "$line"

    if [[ ${line:0:4} = PING ]]; then
      raw "PONG${line:4}"
    elif [[ ${line:0:5} = ERROR ]]; then
      echo "$line" | cat -v
      break
    elif [[ ${line:0:1} = ":" ]]; then
      local args
      readarray -td ' ' args <<<"$line"
      local cmd="${args[1]}"

      if [[ $cmd = "001" ]]; then
        join="$(printf ",#%s" "${channels[@]}")"
        join="${join#,}"
        raw "JOIN $join"
      elif [[ $cmd = "PING" ]]; then
	raw "PONG $nick"
      elif [[ $cmd = "PRIVMSG" ]]; then
        prefix="${line:1}"
        host="${prefix%% *}"
        text="${prefix#* :}"
        if [[ ${args[2]:0:1} = '#' ]]; then
          redis publish "${args[2]:1}:in" "$host $text"
        else
          redis publish "$PRIV_TOPIC" "$host $text"
        fi
      fi
    fi
  done
  raw "QUIT"
}

find-stdbuf

while :; do
  echo "-- Connecting to $server and joining$(printf " #%s" "${channels[@]}")"
  input | nc -w 240 -c $server 6697 | output
  sleep $[5 + RANDOM % 15]
done
